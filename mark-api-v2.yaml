openapi: 3.0.1
info:
  title: Mark Portal API
  description: Mark Portal API BE.
  version: 1.0.0
servers:
  - url: 'http://localhost:9000/'
  - url: 'https://mark-masons.ro'
tags:
  - name: article
    description: 'Everything concerning articles, comments'
  - name: lodge
    description: Lodge management
  - name: event
    description: Event and invitation management
  - name: charity
    description: Charity donations
  - name: user
    description: Operations about user
  - name: template
    description: Templateable library object
  - name: lodge-admin
    description: Operations available only to the Lodge Admin
  - name: order-admin
    description: Operations available only to the Order Admin
paths:
  /public/article:
    get:
      tags:
        - article
        - public
      summary: Get all articles
      operationId: getArticles
      parameters:
        - in: query
          name: category
          schema:
            type: string
            default: BLOG
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
            default: en
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Articles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1regular-user~1article~1%7Bid%7D/put/requestBody/content/application~1json/schema'
  /regular-user/article:
    get:
      tags:
        - article
        - regular-user
      summary: Get all articles
      operationId: getArticles
      parameters:
        - in: query
          name: category
          schema:
            type: string
            default: BLOG
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
            default: en
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Articles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
      security:
        - mark_auth: []
    post:
      tags:
        - article
        - regular-user
      summary: Add an article
      operationId: addArticle
      requestBody:
        description: Article object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        '200':
          description: Article created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid object supplied
          content: {}
      security:
        - mark_auth: []
  '/regular-user/article/{id}':
    put:
      tags:
        - article
        - regular-user
      summary: Modify an article
      operationId: updateArticle
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      requestBody:
        description: Article that is updated
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                author:
                  $ref: '#/components/schemas/User'
                category:
                  type: string
                title:
                  type: string
                slug:
                  type: string
                text:
                  type: string
                tags:
                  type: string
                language:
                  type: string
                audience:
                  type: string
                publishDate:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Article updated
          content:
            application/json:
              schema:
                $ref: '#/paths/~1regular-user~1article~1%7Bid%7D/put/requestBody/content/application~1json/schema'
        '400':
          description: Invalid object supplied
        '404':
          description: Article not found
      security:
        - mark_auth: []
    delete:
      tags:
        - article
        - regular-user
      summary: Delete an article
      operationId: deleteArticle
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: Article deleted
        '404':
          description: Article not found
      security:
        - mark_auth: []
  /regular-user/event:
    get:
      tags:
        - event
        - regular-user
      summary: Get all events
      operationId: getEvents
      parameters:
        - in: query
          name: fromDate
          schema:
            type: string
            format: date-time
        - in: query
          name: toDate
          schema:
            type: string
            format: date-time
        - in: query
          name: future
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Retrieved events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      security:
        - mark_auth: []
  /regular-user/me:
    get:
      tags:
        - user
        - regular-user
      summary: Get currently logged in user
      operationId: myProfile
      responses:
        '200':
          description: Retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - mark_auth: []
  /regular-user/goodstanding:
    get:
      tags:
        - user
        - regular-user
      summary: Download good standing document
      operationId: downloadGoodStanding
      responses:
        '200':
          description: GoodStanding doc
          content:
            application/pdf:
              schema:
                type: string
                format: binary
      security:
        - mark_auth: []
  /regular-user/me/lodge:
    get:
      tags:
        - user
        - regular-user
      summary: Get current user lodges
      operationId: myLodges
      responses:
        '200':
          description: Lodges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lodge'
      security:
        - mark_auth: []
  /regular-user/history:
    get:
      tags:
        - user
        - regular-user
      summary: Get current user history
      operationId: myHistory
      responses:
        '200':
          description: History
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/History'
      security:
        - mark_auth: []
  /regular-user/contribution:
    get:
      tags:
        - user
        - regular-user
      summary: Get current user contributions
      operationId: myContributions
      responses:
        '200':
          description: My Contributions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserContribution'
      security:
        - mark_auth: []
  /regular-user/payment:
    get:
      tags:
        - user
        - regular-user
      summary: Get current user payments
      operationId: myPayments
      responses:
        '200':
          description: My Payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
      security:
        - mark_auth: []
    post:
      tags:
        - user
        - regular-user
      summary: Add payment
      operationId: addPayment
      responses:
        '201':
          description: My Payments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
      security:
        - mark_auth: []
  '/regular-user/rsvp/{code}':
    put:
      tags:
        - event
        - regular-user
      summary: Respond to Event invitation
      operationId: rsvpEvent
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
        - in: query
          name: response
          schema:
            type: string
      requestBody:
        description: Attendance item to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendance'
        required: true
      responses:
        '200':
          description: Attendance updated
        '400':
          description: Invalid object supplied
        '404':
          description: Event or attendance not found
      security:
        - mark_auth: []
  /regular-user/lodge:
    get:
      tags:
        - lodge
        - regular-user
      summary: Get all lodges
      operationId: getLodges
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Lodges retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lodge'
      security:
        - mark_auth: []
  /lodge-admin/article:
    get:
      tags:
        - article
      summary: Get all articles
      operationId: getArticles
      parameters:
        - in: query
          name: category
          schema:
            type: string
            default: BLOG
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
            default: en
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Articles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
      security:
        - mark_auth:
            - lodge
    post:
      tags:
        - article
      summary: Add an article
      operationId: addArticle
      requestBody:
        description: Article object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        '200':
          description: Article created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid object supplied
          content: {}
      security:
        - mark_auth:
            - lodge
  '/lodge-admin/article/{id}':
    put:
      tags:
        - article
      summary: Modify an article
      operationId: updateArticle
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      requestBody:
        description: Article that is updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: Article updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid object supplied
        '404':
          description: Article not found
      security:
        - mark_auth:
            - order
    delete:
      tags:
        - article
      summary: Delete an article
      operationId: deleteArticle
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: Article deleted
        '404':
          description: Article not found
      security:
        - mark_auth:
            - order
  /lodge-admin/event:
    get:
      tags:
        - event
        - lodge-admin
      summary: Get all events
      operationId: getEvents
      parameters:
        - in: query
          name: fromDate
          schema:
            type: string
            format: date-time
        - in: query
          name: toDate
          schema:
            type: string
            format: date-time
        - in: query
          name: future
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Retrieved events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      security:
        - mark_auth:
            - lodge
    post:
      tags:
        - event
        - lodge-admin
      summary: Add an event
      operationId: addEvent
      requestBody:
        description: Event object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '201':
          description: Event created
        '400':
          description: Invalid object supplied
          content: {}
      security:
        - mark_auth:
            - lodge-admin
  '/lodge-admin/event/{id}':
    put:
      tags:
        - event
        - lodge-admin
      summary: Modify an event
      operationId: updateEvent
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      requestBody:
        description: Event that is updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid object supplied
        '404':
          description: Event not found
      security:
        - mark_auth:
            - lodge
    delete:
      tags:
        - event
        - lodge-admin
      summary: Delete an event
      operationId: deleteEvent
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: Event deleted
        '404':
          description: Article not found
      security:
        - mark_auth:
            - lodge
  '/lodge-admin/event/{eventId}/attendance':
    put:
      tags:
        - event
        - lodge-admin
      summary: Update specific attendance item
      operationId: updateAttendanceItem
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: attendanceId
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        description: Attendance item to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendance'
        required: true
      responses:
        '200':
          description: Attendance updated
        '400':
          description: Invalid object supplied
        '404':
          description: Event or attendance not found
      security:
        - mark_auth:
            - lodge
  '/lodge-admin/event/{eventId}/attendance/{id}':
    $ref: '#/paths/~1lodge-admin~1event~1%7BeventId%7D~1attendance'
  /order-admin/article:
    get:
      tags:
        - article
      summary: Get all articles
      operationId: getArticles
      parameters:
        - in: query
          name: category
          schema:
            type: string
            default: BLOG
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
            default: en
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Articles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
      security:
        - mark_auth:
            - order
    post:
      tags:
        - article
      summary: Add an article
      operationId: addArticle
      requestBody:
        description: Article object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        '200':
          description: Article created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid object supplied
          content: {}
      security:
        - mark_auth:
            - order
  '/order-admin/article/{id}':
    put:
      tags:
        - article
        - order-admin
      summary: Modify an article
      operationId: updateArticle
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      requestBody:
        description: Article that is updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: Article updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid object supplied
        '404':
          description: Article not found
      security:
        - mark_auth:
            - order
    delete:
      tags:
        - article
        - order-admin
      summary: Delete an article
      operationId: deleteArticle
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: Article deleted
        '404':
          description: Article not found
      security:
        - mark_auth:
            - order
  /order-admin/audit:
    get:
      tags:
        - audit
        - order-admin
      summary: Get all audit entries
      operationId: getAudit
      parameters:
        - in: query
          name: category
          schema:
            type: string
            default: USER
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Audit entries retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audit'
      security:
        - mark_auth:
            - order
  /order-admin/user:
    get:
      tags:
        - user
        - order-admin
      summary: Get all users
      operationId: getUsers
      parameters:
        - in: query
          name: lodge
          schema:
            type: integer
            format: int64
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Retrieved users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - mark_auth:
            - order
    post:
      tags:
        - user
        - order-admin
      summary: Add user
      operationId: addUser
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid object supplied
      security:
        - mark_auth:
            - order
    put:
      tags:
        - user
        - order-admin
      summary: Upload users as CSV
      operationId: uploadUsers
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Users uploaded
      security:
        - mark_auth:
            - order
  '/order-admin/user/{id}':
    put:
      tags:
        - user
        - order-admin
      summary: Modify a user
      operationId: updateUser
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      requestBody:
        description: User that is updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid object supplied
        '404':
          description: User not found
      security:
        - mark_auth:
            - order
    delete:
      tags:
        - user
        - order-admin
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found
      security:
        - mark_auth:
            - order
  '/order-admin/user/{userId}/history':
    get:
      tags:
        - user
        - order-admin
      summary: Get all history for given user
      operationId: getUserHistory
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Retrieved user history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/History'
      security:
        - mark_auth:
            - order
    post:
      tags:
        - user
        - order-admin
      summary: Add user history
      operationId: addUserHistory
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: integer
      requestBody:
        description: User history itemto add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/History'
        required: true
      responses:
        '200':
          description: User history created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/History'
        '400':
          description: Invalid object supplied
      security:
        - mark_auth:
            - order
  '/order-admin/user/{userId}/history/{id}':
    put:
      tags:
        - user
        - order-admin
      summary: Modify a user history item
      operationId: updateUserHistory
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: integer
        - in: path
          required: true
          name: id
          schema:
            type: integer
      requestBody:
        description: User that is updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/History'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/History'
        '400':
          description: Invalid object supplied
        '404':
          description: User history not found
      security:
        - mark_auth:
            - order
    delete:
      tags:
        - user
        - order-admin
      summary: Delete a user history item
      operationId: deleteUserHistory
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: integer
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: User history deleted
        '404':
          description: User history not found
      security:
        - mark_auth:
            - order
  /order-admin/event:
    get:
      tags:
        - event
        - order-admin
      summary: Get all events
      operationId: getEvents
      parameters:
        - in: query
          name: fromDate
          schema:
            type: string
            format: date-time
        - in: query
          name: toDate
          schema:
            type: string
            format: date-time
        - in: query
          name: future
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Retrieved events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      security:
        - mark_auth:
            - order
    post:
      tags:
        - event
        - order-admin
      summary: Add an event
      operationId: addEvent
      requestBody:
        description: Event object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '201':
          description: Event created
        '400':
          description: Invalid object supplied
          content: {}
      security:
        - mark_auth:
            - order-admin
  '/order-admin/event/{id}':
    put:
      tags:
        - event
        - order-admin
      summary: Modify an event
      operationId: updateEvent
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      requestBody:
        description: Event that is updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid object supplied
        '404':
          description: Event not found
      security:
        - mark_auth:
            - order
    delete:
      tags:
        - event
        - order-admin
      summary: Delete an event
      operationId: deleteEvent
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: Event deleted
        '404':
          description: Event not found
      security:
        - mark_auth:
            - order
  '/order-admin/event/{eventId}/attendance':
    put:
      tags:
        - event
        - order-admin
      summary: Update specific attendance item
      operationId: updateAttendanceItem
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: attendanceId
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        description: Attendance item to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendance'
        required: true
      responses:
        '200':
          description: Attendance updated
        '400':
          description: Invalid object supplied
        '404':
          description: Event or attendance not found
      security:
        - mark_auth:
            - order
  '/order-admin/event/{eventId}/attendance/{id}':
    $ref: '#/paths/~1order-admin~1event~1%7BeventId%7D~1attendance'
  /order-admin/lodge:
    get:
      tags:
        - lodge
        - order-admin
      summary: Get all lodges
      operationId: getLodges
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Lodges retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lodge'
      security:
        - mark_auth:
            - order
    post:
      tags:
        - lodge
        - order-admin
      summary: Add a lodge
      operationId: addLodge
      requestBody:
        description: Lodge object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lodge'
        required: true
      responses:
        '201':
          description: Lodge created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lodge'
        '400':
          description: Invalid object supplied
          content: {}
      security:
        - mark_auth:
            - order
  '/order-admin/lodge/{id}':
    put:
      tags:
        - lodge
        - order-admin
      summary: Modify a lodge
      operationId: updateLodge
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      requestBody:
        description: Lodge that is updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lodge'
      responses:
        '200':
          description: Lodge updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lodge'
        '400':
          description: Invalid object supplied
        '404':
          description: Lodge not found
      security:
        - mark_auth:
            - order
    delete:
      tags:
        - lodge
        - order-admin
      summary: Delete a lodge
      operationId: deleteLodge
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: Lodge deleted
        '404':
          description: Lodge not found
      security:
        - mark_auth:
            - order
components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          $ref: '#/components/schemas/User'
        category:
          type: string
        title:
          type: string
        slug:
          type: string
        text:
          type: string
        tags:
          type: string
        language:
          type: string
        audience:
          type: string
        publishDate:
          type: string
          format: date-time
    Audit:
      type: object
      properties:
        id:
          type: integer
          format: int64
        agent:
          type: string
        category:
          type: string
        operation:
          type: string
        payload:
          type: string
        date:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        address:
          type: string
        correspondenceAddress:
          type: string
          nullable: true
        phoneNumber:
          type: string
        secondaryPhoneNumber:
          type: string
          nullable: true
        birthdate:
          type: string
          format: date-time
        profession:
          type: string
          nullable: true
        workplace:
          type: string
          nullable: true
        userStatus:
          type: string
        rank:
          type: string
        orderPrivilege:
          type: string
        nationalId:
          type: string
          nullable: true
        nationalIdDetails:
          type: string
          nullable: true
        mmh:
          type: string
        markCode:
          type: string
          nullable: true
        markImage:
          type: string
          nullable: true
    Lodge:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          type: string
        number:
          type: string
        orient:
          type: string
        location:
          type: string
          nullable: true
    History:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
          nullable: true
        lodge:
          $ref: '#/components/schemas/Lodge'
        eventType:
          type: string
        event:
          type: string
        comment:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
          nullable: true
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        text:
          type: string
        location:
          type: string
        startDate:
          type: string
          format: date-time
        eventType:
          type: string
        status:
          type: string
        lodge:
          $ref: '#/components/schemas/Lodge'
    Attendance:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        user:
          $ref: '#/components/schemas/User'
        status:
          type: string
        statusConfirmation:
          type: string
        comment:
          type: string
    Template:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bundle:
          type: string
        name:
          type: string
        description:
          type: string
        content:
          type: string
    Contribution:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        category:
          type: string
        destination:
          $ref: '#/components/schemas/Lodge'
        value:
          type: number
          format: double
        issueDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
    UserContribution:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        payment:
          $ref: '#/components/schemas/Payment'
        contribution:
          $ref: '#/components/schemas/Contribution'
        status:
          type: string
    Payment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        value:
          type: number
          format: double
        paymentDate:
          type: string
          format: date
        status:
          type: string
  securitySchemes:
    mark_auth:
      type: openIdConnect
      openIdConnectUrl: 'https://mark-masons-ro.eu.auth0.com/.well-known/openid-configuration'
